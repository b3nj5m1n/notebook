#+TITLE: GENERAL NOTES - RUBY
#+AUTHOR: Benjamin
#+EMAIL: b3nj4m1n@gmx.net
#+LANGUAGE: en
#+FILETAGS: :ruby:

* Set-up :setup:
** Latest Version :latest_version:
*** Arch Linux :arch_linux:
#+begin_src shell :results none :exports code :eval never
pacman -S ruby
#+end_src
* Snippets :snippet:
** I/O :i_o:
*** Write to stdout :write:stdout:
#+begin_src ruby :results output :exports both :wrap example
puts "Output"
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example

*** Read from stdin :read:stdin:
#+begin_src ruby :results none :exports both :wrap example :eval never
s = ARGF.gets
#+end_src

*** Write to file :write:file:
#+begin_src ruby :results none :exports both :wrap example :eval never
File.write("/path/to/file", "Test")
#+end_src

*** Read from file :read:file:
#+begin_src ruby :results none :exports both :wrap example :eval never
file = File.open("/path/to/file")
file_data = file.readlines
file.close
#+end_src
** Strings :string:
*** Check if substring is contained :contained:
#+begin_src ruby :results output :exports both :wrap example
str = "Rick'n Morty"
sub = "Rick"
if str.include? sub
  puts "Roll"
end
#+end_src

#+RESULTS:
#+begin_example
Roll
#+end_example
*** Concatenate two strings :concat:
#+begin_src ruby :results output :exports both :wrap example
s1 = "I love"
s2 = "Lasagne"
s = "#{s1} #{s2}"
puts s
#+end_src

#+RESULTS:
#+begin_example
I love Lasagne
#+end_example
*** Compare with other string :compare:
#+begin_src ruby :results output :exports both :wrap example
result = "Emacs" <=> "Vim"
puts result
#+end_src

#+RESULTS:
#+begin_example
-1
#+end_example
*** Convert to Lowercase/Uppercase :lowercase:uppercase:
#+begin_src ruby :results output :exports both :wrap example
s = "this iS aN example."
s_lower = s.downcase
puts s_lower
s_upper = s.upcase
puts s_upper
s_cap = s.capitalize
puts s_cap
#+end_src

#+RESULTS:
#+begin_example
this is an example.
THIS IS AN EXAMPLE.
This is an example.
#+end_example
*** Get char at index :index:
#+begin_src ruby :results output :exports both :wrap example
s = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
result = s[6]
puts result
#+end_src

#+RESULTS:
#+begin_example
G
#+end_example

*** Get length :length:
#+begin_src ruby :results output :exports both :wrap example
s = "123456"
result = s.length
puts result
#+end_src

#+RESULTS:
#+begin_example
6
#+end_example
*** Is equal to other string :equal:
#+begin_src ruby :results output :exports both :wrap example
s1 = "Test"
s2 = "TesT"
puts s1 == s2
s2 = "Test"
puts s1 == s2
#+end_src

#+RESULTS:
#+begin_example
false
true
#+end_example
*** Replace substring with string :replace:
#+begin_src ruby :results output :exports both :wrap example
s = "Even Hitler cared about Austria or something."
sub_o = "Austria"
sub_v = "Germany"
result = s.sub(sub_o, sub_v)
puts result
#+end_src

#+RESULTS:
#+begin_example
Even Hitler cared about Germany or something.
#+end_example
*** Reverse :reverse:
#+begin_src ruby :results output :exports both :wrap example
s = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
result = s.reverse
puts result
#+end_src

#+RESULTS:
#+begin_example
ZYXWVUTSRQPONMLKJIHGFEDCBA
#+end_example
*** Split by delimiter :split:
#+begin_src ruby :results output :exports both :wrap example
s = "I,don't,know"
result = s.split(",")
puts result
#+end_src

#+RESULTS:
#+begin_example
I
don't
know
#+end_example
*** Strip whitespace :strip:
#+begin_src ruby :results output :exports both :wrap example
s = "    There's some leading spaces and a few trailing tabs.			"
result = s.strip
puts result
#+end_src

#+RESULTS:
#+begin_example
There's some leading spaces and a few trailing tabs.
#+end_example
** Conversions :onversion:
*** Float -> Integer :float_to_integer:
#+begin_src ruby :results none :exports code :eval never
f = 2.718
i = f.to_i
#+end_src
*** Float -> String :float_to_string:
#+begin_src ruby :results none :exports code :eval never
f = 2.718
s = f.to_s
#+end_src
*** Integer -> Float :integer_to_float:
#+begin_src ruby :results none :exports code :eval never
i = 2
f = i.to_f
#+end_src
*** Integer -> String :integer_to_string:
#+begin_src ruby :results none :exports code :eval never
i = 2
s = i.to_s
#+end_src
*** String -> Float :string_to_float:
#+begin_src ruby :results none :exports code :eval never
s = "2.718"
f = s.to_f
#+end_src
*** String -> Integer :string_to_integer:
#+begin_src ruby :results none :exports code :eval never
s = "2"
i = s.to_i
#+end_src
** Comparison & Boolean Operators :comparison:boolean_operator:
*** And :and:
#+begin_src ruby :results none :exports code :eval never
&&
#+end_src
*** Equal :equal:
#+begin_src ruby :results none :exports code :eval never
==
#+end_src
*** Greater Than :greater_than:
#+begin_src ruby :results none :exports code :eval never
>
#+end_src
*** Greater Than Or Equal :greater_than_or_equal:
#+begin_src ruby :results none :exports code :eval never
>=
#+end_src
*** Less Than :less_than:
#+begin_src ruby :results none :exports code :eval never
<
#+end_src
*** Less Than Or Equal :less_than_or_equal:
#+begin_src ruby :results none :exports code :eval never
<=
#+end_src
*** Not :not:
#+begin_src ruby :results none :exports code :eval never
!
unless
#+end_src
*** Not Equal :not_equal:
#+begin_src ruby :results none :exports code :eval never
!=
#+end_src
*** Or :or:
#+begin_src ruby :results none :exports code :eval never
||
#+end_src
** Flow-Control :flow_control:
*** For-each Loop :for_each:
#+begin_src ruby :results output :exports both :wrap example
array = [1, 2, 3, 4, 5]
array.each do |item|
  puts item
end
#+end_src

#+RESULTS:
#+begin_example
1
2
3
4
5
#+end_example
*** For Loop :for:
#+begin_src ruby :results output :exports both :wrap example
for i in 0..5
  puts i
end
#+end_src

#+RESULTS:
#+begin_example
0
1
2
3
4
5
#+end_example
*** If, else if, else :if:else_if:else:
#+begin_src ruby :results output :exports both :wrap example
x = 1
if x > 2
   puts "x is greater than 2"
elsif x <= 2 and x!=0
   puts "x is 1"
else
   puts "I can't guess the number"
end
#+end_src

#+RESULTS:
#+begin_example
x is 1
#+end_example
*** While Loop :while:
#+begin_src ruby :results output :exports both :wrap example
i = 0
while i < 5  do
  puts i
  i+=1
end
#+end_src

#+RESULTS:
#+begin_example
0
1
2
3
4
#+end_example
** Importing :import:
*** Import File :import_file:
#+begin_src ruby :results none :exports code :eval never
require "filename"
#+end_src
** Classes :class:
*** Define Class :define_class:
#+begin_src ruby :session class_example :results none :exports code
class Coordinates
  def initialize(x, y)
    @x = x
    @y = y
  end
  def output
    puts "(#{@x} | #{@y})"
  end
end
#+end_src
*** Access Modifiers :access_modifiers:
**** Public :public:
#+begin_src ruby :results none :exports code :eval never
public
#+end_src
**** Private :private:
#+begin_src ruby :results none :exports code :eval never
private
#+end_src
**** Protected :protected:
#+begin_src ruby :results none :exports code :eval never
protected
#+end_src
*** Initialize Object
#+begin_src ruby :session class_example :results output :exports both :wrap example
coords = Coordinates.new 5, 5
coords.output
#+end_src

#+RESULTS:
#+begin_example
(5 | 5)
#+end_example

** Functions :function:
*** Define Function
#+begin_src ruby :session function_example :results none :exports code
def say_hello(name)
   puts "Hello, " + name + "!"
end
#+end_src
*** Call Function
#+begin_src ruby :session function_example :results output :exports both :wrap example
say_hello "world"
#+end_src

#+RESULTS:
#+begin_example
Hello, world!
#+end_example
** Primitive Data Types :primitive_data_type:
*** Character :character:
#+begin_src ruby :results none :exports code :eval never
c = 'a'
#+end_src
*** Integer :integer:
#+begin_src ruby :results none :exports code :eval never
i = 1
#+end_src
*** Float :float:
#+begin_src ruby :results none :exports code :eval never
f = 1.618
#+end_src
*** Boolean :boolean:
#+begin_src ruby :results none :exports code :eval never
b = true
b = false
#+end_src
** Data Structures :data_structure:
*** Array :array:
**** Initialize
#+begin_src ruby :session array_example :results none :exports code
a = ["Kill Yourself", "Lower Your Expectations", "My Whole Family Thinks I'm Gay"]
#+end_src
**** Use
#+begin_src ruby :session array_example :results output :exports both :wrap example
puts a[2]
#+end_src

#+RESULTS:
#+begin_example
My Whole Family Thinks I'm Gay
#+end_example
*** Record / Tuple / Struct :record:tuple:struct:
**** Initialize
#+begin_src ruby :session record_example :results none :exports code
Customer = Struct.new(:name, :age) do
  def greeting
    "Hello #{name}!"
  end
end
#+end_src
**** Use
#+begin_src ruby :session record_example :results output :exports both :wrap example
dave = Customer.new("Richard Hendricks", "17")
puts dave.age
puts dave.greeting
#+end_src

#+RESULTS:
#+begin_example
17
Hello Richard Hendricks!
#+end_example
*** Dictionary :dictionary:
**** Initialize
#+begin_src ruby :session dict_example :results none :exports code
months = Hash.new( "month" )
months = {"1" => "January", "2" => "February"}
#+end_src
**** Use
#+begin_src ruby :session dict_example :results output :exports both :wrap example
keys = months.keys
puts "#{keys}"
puts "#{months["2"]}"
#+end_src

#+RESULTS:
#+begin_example
["1", "2"]
February
#+end_example
