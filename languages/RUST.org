#+TITLE: GENERAL NOTES - RUST
#+AUTHOR: Benjamin
#+EMAIL: b3nj4m1n@gmx.net
#+LANGUAGE: en
#+FILETAGS: :rust:

* Set-up :setup:
** Latest Version :latest_version:
*** Arch Linux :arch_linux:
#+begin_src shell :results none :exports code :eval never
sudo pacman -S rust
rustup install stable
rustup default stable
#+end_src
* Snippets :snippet:
** I/O :i_o:
*** Write to stdout :write:stdout:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    println!("Hello World!");
}
#+end_src

#+RESULTS:
#+begin_example
Hello World!
#+end_example

*** Read from stdin :read:stdin:
#+begin_src rust :results none :exports both :wrap example :eval never
use std::io::{self, Read};

fn main() {
    let mut content = String::new();
    io::stdin()
        .read_to_string(&mut content)
        .expect("Failed to read line");
    println!("{}", content.to_string());
}
#+end_src

*** Write to file :write:file:
**** Write
#+begin_src rust :results none :exports both :wrap example :eval never
use std::fs::File;
use std::io::{Write, Error};

fn main() -> Result<(), Error> {
    let mut output = File::create("data.txt")?;
    write!(output, "Test")?;
    Ok(())
}
#+end_src
**** Append
#+begin_src rust :results none :exports both :wrap example :eval never
use std::fs::OpenOptions;
use std::io::Write;

fn main() {
   let mut file = OpenOptions::new().append(true).open("data.txt").expect("cannot open file");
   file.write_all("Test Data üêô".as_bytes()).expect("write failed");
}
#+end_src

*** Read from file :read:file:
#+begin_src rust :results none :exports both :wrap example :eval never
use std::io::Read;

fn main(){
   let mut file = std::fs::File::open("data.txt").unwrap();
   let mut contents = String::new();
   file.read_to_string(&mut contents).unwrap();
   print!("{}", contents);
}
#+end_src
** Strings :string:
*** Check if substring is contained :contained:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let s = "This is a test.";
    if s.contains("Test") {
        println!("Is contained.")
    } else {
        println!("Is not contained.")
    }
}
#+end_src

#+RESULTS:
#+begin_example
Is not contained.
#+end_example

*** Concatenate two strings :concat:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let a = "Hello";
    let b = "world";
    let result = [a, b].join(" ");

    print!("{}", result);
}
#+end_src

#+RESULTS:
#+begin_example
Hello world
#+end_example

*** Convert to Lowercase/Uppercase :lowercase:uppercase:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let test_str = "Hello";

    let upper = test_str.to_uppercase();
    let lower = test_str.to_lowercase();

    println! {"{}", upper};
    println! {"{}", lower};
}
#+end_src

#+RESULTS:
#+begin_example
HELLO
hello
#+end_example

*** Get char at index :index:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let s = "abcdefghijklmnopqrstuvwxyz";
    println!("{}", s.chars().nth(0).unwrap());
}
#+end_src

#+RESULTS:
#+begin_example
a
#+end_example

*** Get length :length:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let s = "abcdefghijklmnopqrstuvwxyz";
    println!("{}", s.chars().count());
}
#+end_src

#+RESULTS:
#+begin_example
26
#+end_example

*** Replace substring with string :replace:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let s = r#"This is just a test."#;
    let t = s.replace("just", "not");
    println!("{}", t);
}
#+end_src

#+RESULTS:
#+begin_example
This is not a test.
#+end_example

*** Reverse :reverse:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let alph = "abcdefghijklmnopqrstuvwxyz";
    let reved = alph.chars().rev().collect::<String>();
    println!("{}", reved);
}
#+end_src

#+RESULTS:
#+begin_example
zyxwvutsrqponmlkjihgfedcba
#+end_example

*** Split by delimiter :split:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let split = "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,".split(",");
    for s in split {
        print!("{} ", s)
    }
}
#+end_src

#+RESULTS:
#+begin_example
a b c d e f g h i j k l m n o p q r s t u v w x y z
#+end_example

*** Strip whitespace :strip:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let s = "     This is just a test			".trim();
    println!("{}", s);
}
#+end_src

#+RESULTS:
#+begin_example
This is just a test
#+end_example

** Conversions :onversion:
*** Float -> Integer :float_to_integer:
#+begin_src rust :results none :exports code :eval never
let x = 10.0 as i32;
#+end_src
*** Float -> String :float_to_string:
#+begin_src rust :results none :exports code :eval never
let x: f32 = 10;
let s: String = x.to_string();
#+end_src
*** Integer -> Float :integer_to_float:
#+begin_src rust :results none :exports code :eval never
let x = 10 as f32;
#+end_src
*** Integer -> String :integer_to_string:
#+begin_src rust :results none :exports code :eval never
let x: u32 = 10;
let s: String = x.to_string();
#+end_src
*** String -> Float :string_to_float:
#+begin_src rust :results none :exports code :eval never
let pi: f32 = "3.14".parse().unwrap();
#+end_src
*** String -> Integer :string_to_integer:
#+begin_src rust :results none :exports code :eval never
let x: i32 = "10".parse().unwrap();
#+end_src
** Comparison & Boolean Operators :comparison:boolean_operator:
*** And :and:
#+begin_src rust :results none :exports code :eval never
&&
#+end_src
*** Equal :equal:
#+begin_src rust :results none :exports code :eval never
==
#+end_src
*** Greater Than :greater_than:
#+begin_src rust :results none :exports code :eval never
>
#+end_src
*** Greater Than Or Equal :greater_than_or_equal:
#+begin_src rust :results none :exports code :eval never
>=
#+end_src
*** Less Than :less_than:
#+begin_src rust :results none :exports code :eval never
<
#+end_src
*** Less Than Or Equal :less_than_or_equal:
#+begin_src rust :results none :exports code :eval never
<=
#+end_src
*** Not :not:
#+begin_src rust :results none :exports code :eval never
!
#+end_src
*** Not Equal :not_equal:
#+begin_src rust :results none :exports code :eval never
!=
#+end_src
*** Or :or:
#+begin_src rust :results none :exports code :eval never
||
#+end_src
** Flow-Control :flow_control:
*** For-each Loop :for_each:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let mut array = [1u8, 2, 3, 4, 5, 6];
    for (i, elem) in array.iter_mut().enumerate() {
        println!("{}: {}", i, elem)
    }
}
#+end_src

#+RESULTS:
#+begin_example
0: 1
1: 2
2: 3
3: 4
4: 5
5: 6
#+end_example

*** For Loop :for:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    for x in 1..6 {
        print!("{} ", x);
    }
}
#+end_src

#+RESULTS:
#+begin_example
1 2 3 4 5
#+end_example

*** If, else if, else :if:else_if:else:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let n = 5;

    if n < 0 {
        print!("{} is negative", n);
    } else if n > 0 {
        print!("{} is positive", n);
    } else {
        print!("{} is zero", n);
    }
}
#+end_src

#+RESULTS:
#+begin_example
5 is positive
#+end_example

*** While Loop :while:
#+begin_src rust :results output :exports both :wrap example
fn main() {
    let mut x = 0;
    while x < 6 {
        print!("{} ", x);
        x += 1;
    }
}
#+end_src

#+RESULTS:
#+begin_example
0 1 2 3 4 5
#+end_example

** Importing :import:
*** Import Package :import_package:
Create a project using =cargo new=, put dependencies in =Cargo.toml=.
#+begin_src rust :results none :exports code :eval never
use package;
#+end_src
*** Import File :import_file:
#+begin_src rust :results none :exports code :eval never
// Hello is the filename without extension
mod hello;
#+end_src
** Classes :class:
*** Define Class :define_class:
#+begin_src rust :results none :exports both :wrap example
struct Dog {
    name: &'static str,
    bark: &'static str,
}

trait Animal {
    fn new(name: &'static str) -> Self;

    fn name(&self) -> &'static str;

    fn talk(&self) {
        println!("{} said something.", self.name());
    }
}

// impl Dog {
// fn fetch() {
//     println!("Dog has died trying to fetch the stick.");
// }
// }

impl Animal for Dog {
    fn new(name: &'static str) -> Dog {
        Dog {
            name: name,
            bark: "Wufff",
        }
    }
    fn name(&self) -> &'static str {
        self.name
    }
    fn talk(&self) {
        println!("{}: {}", self.name, self.bark);
    }
}

fn main() {
    let doggo: Dog = Animal::new("Doggo");
    doggo.talk();
}
#+end_src

#+RESULTS:
#+begin_example
Doggo: Wufff
#+end_example

** Functions :function:
#+begin_src rust :session function_example :results output :exports both :wrap example
fn main() {
    let x = 5;
    let y = -6;
    print!(
        "The manhattan distance of ({}|{}) is {}.",
        x,
        y,
        manhattan_distance(x, y)
    )
}
fn manhattan_distance(x: i32, y: i32) -> i32 {
    x.abs() + y.abs()
    // or: return x.abs() + y.abs();
}
#+end_src

#+RESULTS:
#+begin_example
The manhattan distance of (5|-6) is 11.
#+end_example

** Primitive Data Types :primitive_data_type:
*** Character :character:
#+begin_src rust :results none :exports code :eval never
let a = 'a';
let b = 'b';
let keyboard = '‚å®';
#+end_src
*** Integer :integer:
#+begin_src rust :results none :exports code :eval never
// These types include i8, i16, i32, i64, isize, u8, u16, u32, u64, usize.
let x = 5;
#+end_src
*** Float :float:
#+begin_src rust :results none :exports code :eval never
let pi = 3.1415926535897932384626;
let e = 2.718;
#+end_src
*** Boolean :boolean:
#+begin_src rust :results none :exports code :eval never
let t = true;
let f = false;
#+end_src
*** Reference / Pointer :reference:pointer:
#+begin_src rust :results none :exports code :eval never
fn main() {
    let s1 = String::from("hello");
    let len = calculate_length(&s1);
    println!("The length of '{}' is {}.", s1, len);
}
fn calculate_length(s: &String) -> usize {
    s.len()
}
#+end_src
** Data Structures :data_structure:
*** Array :array:
#+begin_src rust :results none :exports code :wrap example
fn main() {
    let mut array: [i32; 3] = [0; 3];
    array[0] = 1;
    array[1] = 2;
    array[2] = 3;

    for x in &array {
        print!("{} ", x);
    }
}
#+end_src

#+RESULTS:
#+begin_example
1 2 3
#+end_example

*** Linked-List :linked_list:
**** Initialize
#+begin_src rust :results none :exports code :wrap example
fn main() {
    let mut vec = Vec::new();
    vec.push(1);
    vec.push(2);

    vec[0] = 7;

    for x in &vec {
        println!("{}", x);
    }
}
#+end_src

#+RESULTS:
#+begin_example
7
2
#+end_example

*** Record / Tuple / Struct :record:tuple:struct:
#+begin_src rust :results output :exports both :wrap example
struct Point {
    x: f32,
    y: f32,
}

fn main() {
    let point: Point = Point { x: 10.3, y: 0.4 };
    print!("({}|{})", point.x, point.y)
}
#+end_src

#+RESULTS:
#+begin_example
(10.3|0.4)
#+end_example

*** Union :union:
#+begin_src rust :results output :exports both :wrap example
union Point {
    x: i8,
    y: i8,
}

fn main() {
    let p = Point { x: 1 };
    unsafe { print!("({}|{})", p.x, p.y) }
}
#+end_src

#+RESULTS:
#+begin_example
(1|1)
#+end_example

*** Dictionary :dictionary:
#+begin_src rust :results output :exports both :wrap example
use std::collections::HashMap;

fn main() {
    let mut book_reviews = HashMap::new();
    book_reviews.insert(
        "Harry Potter and the Philosophers Stone".to_string(),
        "Very nice.".to_string(),
    );
    book_reviews.insert(
        "Harry Potter and the Order of the Phoenix".to_string(),
        "Masterpiece.".to_string(),
    );
    book_reviews.insert(
        "Harry Potter and the Deathly Hallows".to_string(),
        "Too much death for my liking.".to_string(),
    );
    let title = "Harry Potter and the Chamber of Secrets";
    if !book_reviews.contains_key(title) {
        println!(
            "We've got {} reviews, but {} is not one of them.",
            book_reviews.len(),
            title
        );
    }
    book_reviews.remove("Harry Potter and the Philosophers Stone");
    for (key, value) in book_reviews.into_iter() {
        println!("{}: {}", key, value);
    }
}
#+end_src

#+RESULTS:
#+begin_example
We've got 3 reviews, but Harry Potter and the Chamber of Secrets is not one of them.
Harry Potter and the Order of the Phoenix: Masterpiece.
Harry Potter and the Deathly Hallows: Too much death for my liking.
#+end_example
