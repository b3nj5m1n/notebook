#+TITLE: DEV NOTEBOOK - README
#+AUTHOR: Benjamin
#+EMAIL: b3nj4m1n@gmx.net
#+LANGUAGE: en

This is a generalised example of what an entry for a language should look like.

When something is written in all caps, that means its a variable which should be replaced.

* LANGUAGE :LANGUAGE:
** Set-up :setup:
*** VERSION 1.X :VERSION_1_X:
**** SYSTEM A :SYSTEM_A:
#+begin_src shell :results none :exports code :eval never
# CODE
#+end_src
** Snippets :snippet:
*** I/O :i_o:
**** Write to stdout :write:stdout:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example

**** Read from stdin :read:stdin:
#+begin_src LANG :results none :exports both :wrap example :eval never
# CODE
#+end_src

**** Write to file :write:file:
#+begin_src LANG :results none :exports both :wrap example :eval never
# CODE
#+end_src

**** Read from file :read:file:
#+begin_src LANG :results none :exports both :wrap example :eval never
# CODE
#+end_src
*** Strings :string:
**** Check if substring is contained :contained:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Concatenate two strings :concat:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Compare with other string :compare:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Convert to Lowercase/Uppercase :lowercase:uppercase:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Get char at index :index:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Get length :length:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Is equal to other string :equal:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Replace substring with string :replace:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Reverse :reverse:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Split by delimiter :split:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Strip whitespace :strip:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
*** Conversions :onversion:
**** Array -> List :array_to_list:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Float -> Integer :float_to_integer:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Float -> String :float_to_string:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Integer -> Float :integer_to_float:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Integer -> String :integer_to_string:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** List -> Array :list_to_array:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** String -> Float :string_to_float:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** String -> Integer :string_to_integer:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
*** Comparison & Boolean Operators :comparison:boolean_operator:
**** And :and:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Equal :equal:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Greater Than :greater_than:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Greater Than Or Equal :greater_than_or_equal:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Less Than :less_than:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Less Than Or Equal :less_than_or_equal:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Not :not:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Not Equal :not_equal:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Or :or:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
*** Flow-Control :flow_control:
**** For-each Loop :for_each:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** For Loop :for:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** If, else if, else :if:else_if:else:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** While Loop :while:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
*** Importing :import:
**** Import Package :import_package:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Import File :import_file:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
*** Classes :class:
**** Define Class :define_class:
#+begin_src LANG :session class_example :results none :exports code
# CODE
#+end_src
**** Access Modifiers :access_modifiers:
***** Public :public:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
***** Private :private:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
***** Protected :protected:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Initialize Object
#+begin_src LANG :session class_example :results none :exports both
# CODE
#+end_src
*** Functions :function:
**** Define Function
#+begin_src LANG :session function_example :results none :exports code
# CODE
#+end_src
**** Call Function
#+begin_src LANG :session function_example :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
*** Primitive Data Types :primitive_data_type:
**** Character :character:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Integer :integer:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Float :float:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Boolean :boolean:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
**** Reference / Pointer :reference:pointer:
#+begin_src LANG :results none :exports code :eval never
# CODE
#+end_src
*** Data Structures :data_structure:
**** Array :array:
***** Initialize
#+begin_src LANG :session array_example :results none :exports code
# CODE
#+end_src
***** Use
#+begin_src LANG :session array_example :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Linked-List :linked_list:
***** Initialize
#+begin_src LANG :session list_example :results none :exports code
# CODE
#+end_src
***** Use
#+begin_src LANG :session list_example :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Record / Tuple / Struct :record:tuple:struct:
***** Initialize
#+begin_src LANG :session record_example :results none :exports code
# CODE
#+end_src
***** Use
#+begin_src LANG :session record_example :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Union :union:
***** Initialize
#+begin_src LANG :session union_example :results none :exports code
# CODE
#+end_src
***** Use
#+begin_src LANG :session union_example :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Dictionary :dictionary:
***** Initialize
#+begin_src LANG :session dict_example :results none :exports code
# CODE
#+end_src
***** Use
#+begin_src LANG :session dict_example :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
** Troubleshooting :troubleshooting:
*** ERROR MESSAGE :ERROR_MESSAGE:ERROR_CLASS:ERROR_FUNCTION:
**** Error :error:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Solution :solution:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
** Frameworks :framework:
*** FRAMEWORK 1 :FRAMEWORK_1:
**** Set-up
***** VERSION 1.X :VERSION_1_X:
****** SYSTEM A :SYSTEM_A:
#+begin_src shell
# code
#+end_src
**** Snippets :snippet:
***** SNIPPET 1 :snippet_1:
****** SNIPPET 1 TITLE :snippet_1_title:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
**** Troubleshooting :troubleshooting:
***** ERROR MESSAGE :ERROR_MESSAGE:ERROR_CLASS:ERROR_FUNCTION:
****** Error :error:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
****** Solution :solution:
#+begin_src LANG :results output :exports both :wrap example
# CODE
#+end_src

#+RESULTS:
#+begin_example
Output
#+end_example
